name: Backup

on:
  repository_dispatch:
    types: [backup_repo]
  workflow_dispatch:
    inputs:
      repos:
        description: List of repos to backup, formatted as a JSON array, e.g. ["exercism/csharp-test-runner"]
        required: true
        default: ""
  schedule:
    - cron: 0 0 * * * # Daily

permissions:
  contents: read

jobs:
  fetch-repos:
    name: Fetch repos
    runs-on: ubuntu-22.04

    outputs:
      repos: ${{ steps.fetch-repos.outputs.result }}

    steps:
      - name: Fetch the repos to backup
        id: fetch-repos
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0
        with:
          script: |
            if (context.eventName === 'repository_dispatch') {
              return context.payload.client_payload.repos
            } else if (context.eventName === 'workflow_dispatch') {
              return JSON.parse(context.payload.inputs.repos)
            } else {
              const trackRepos = await github.paginate(github.rest.search.repos, {
                q: 'org:exercism+topic:exercism-tooling+is:public+archived:false'
              })

              return trackRepos.flatMap(({ full_name }) => [full_name])

  backup-repos:
    needs: [fetch-repos]
    name: Backup ${{ matrix.repo }}
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    # Launch one job per track.
    # This is probably less efficient than running everything in one job
    # and manually cloning and checking out the repos. However, launching a job
    # lets us use actions like actions/checkout.
    # It also gives us a pretty job overview that makes it easy to spot issues with
    # particular tracks.
    strategy:
      fail-fast: false
      matrix:
        repo: ${{ fromJson(needs.fetch-repos.outputs.repos) }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          repository: ${{ matrix.repo }}
          fetch-depth: 0 # Fetch the entire history to backup everyting

      - name: Setup SSH for AWS CodeCommit
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_CODECOMMIT_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa git-codecommit.${{ secrets.AWS_REGION }}.amazonaws.com >> ~/.ssh/known_hosts

      - name: Push repo to AWS CodeCommit
        run: |
          git remote add aws-codecommit "ssh://${{ secrets.AWS_CODECOMMIT_SSH_PRIVATE_KEY_ID }}@git-codecommit.${{ secrets.AWS_REGION }}.amazonaws.com/v1/repos/${{ github.event.repository.name }}"
          git push --tags --prune aws-codecommit "refs/remotes/origin/*:refs/heads/*"
